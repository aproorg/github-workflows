name: "ðŸš€ Deploy ECS service"
description: "Deploy service on ECS with terraform"

inputs:
  AWS_REGION:
    description: "The AWS region to use"
    required: true
    default: eu-west-1
  ENVIRONMENT:
    description: "Enter the environment."
    required: true
  AWS_DEPLOYMENT_ROLE:
    description: "The ARN of the AWS github-ci role the role to use for deployment"
    required: true
  IMAGE_TAG:
    description: "The version tag of the image to deploy. Can be any image tag e.g. latest, 1.0.0, git sha"
    required: true
  FORCE_NEW_DEPLOYMENT:
    description: "Force a new deployment even if the image tag is the same as the current deployment. E.g. latest"
    required: false
    default: false
  SERVICE_NAME:
    description: "The name of the service to deploy. Only required if force new deployment is true"
    required: false
  CLUSTER_NAME:
    description: "The name of the ECS cluster to deploy to. Only required if force new deployment is true"
    required: false
  TERRAFORM_VERSION:
    description: "The version of Terraform to use"
    required: false
    default: 1.9.8
  PRE_APPLIED_RESOURCES:
    description: "Resources to apply before deploying"
    required: false
    default: "[]"
  TERRAFORM_PATH:
    description: "The path to the terraform files"
    required: false
    default: "terraform"
  SERVICES:
    descritpion: "Only for deployment of mono repo and terraform in root"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-Terraform@v3
      with:
        terraform_version: ${{ inputs.TERRAFORM_VERSION }}

    - name: Terraform version
      shell: bash
      run: terraform --version

    - name: "Configure AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.AWS_DEPLOYMENT_ROLE }}
        aws-region: ${{ inputs.AWS_REGION }}

    - name: Terraform apply
      shell: bash
      run: |
        cd ${{ inputs.TERRAFORM_PATH }}/${{ inputs.ENVIRONMENT }}
        terraform init
        for resource in $(echo '${{ inputs.PRE_APPLIED_RESOURCES }}' | jq -r '.[]'); do
          echo "Applying target: $resource"
          terraform apply -auto-approve -target="$resource" -var 'image_tag=${{ inputs.IMAGE_TAG }}'
        done
        terraform apply -auto-approve -var 'image_tag=${{ inputs.IMAGE_TAG }}'

    - name: Force new deployment
      shell: bash
      if: ${{ inputs.FORCE_NEW_DEPLOYMENT == 'true' && inputs.SERVICE_NAME && inputs.CLUSTER_NAME }}
      run: |
        aws ecs update-service \
          --cluster ${{ inputs.CLUSTER_NAME }} \
          --service ${{ inputs.SERVICE_NAME }} \
          --force-new-deployment

    - name: Wait for stable
      shell: bash
      if: ${{ inputs.FORCE_NEW_DEPLOYMENT == 'true' && inputs.SERVICE_NAME && inputs.CLUSTER_NAME }}
      run: |
        aws ecs wait services-stable \
          --cluster ${{ inputs.CLUSTER_NAME }} \
          --services ${{ inputs.SERVICE_NAME }}

    - name: service list
      id: service_list
      if: ${{ inputs.SERVICES }}
      shell: bash
      run: |
        list=$(echo '${{ inputs.SERVICES }}' | jq -r ' . |map(.name) | join(" ")')
        echo 'service_list=${list}' >> $GITHUB_OUTPUT

    - name: Wait for all stable
      shell: bash
      if: ${{ inputs.SERVICES }}
      run: |
        aws ecs wait services-stable \
          --cluster ${{ inputs.CLUSTER_NAME }} \
          --services ${{ steps.service_list.outputs.service_list }}
